{"ast":null,"code":"var _jsxFileName = \"/Users/youjinli/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState, useRef } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]);\n  const ref = useRef({\n    prev: '',\n    cur: ''\n  }); // const transactions = useMemo(\n  //   () => {\n  //     console.log(paginatedTransactions,'paginatedTransactions');\n  //     console.log(transactionsByEmployee,'transactionsByEmployee');\n  //     return paginatedTransactions?.data ?? transactionsByEmployee ?? null\n  //   },\n  //   [paginatedTransactions, transactionsByEmployee]\n  // )\n\n  useEffect(() => {\n    console.log(paginatedTransactions, 'paginatedTransactions-1');\n    console.log(transactionsByEmployee, 'transactionsByEmployee-2');\n\n    if (!ref.current && paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactions([...transactions, ...paginatedTransactions.data]);\n    }\n  }, [paginatedTransactions, transactionsByEmployee]);\n  console.log(transactions, 'transactions');\n  const loadAllTransactions = useCallback(async () => {\n    ref.current.cur = '';\n    ref.current.prev = '';\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    console.log(2222, employeeId);\n    ref.current = employeeId;\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id) {\n            await loadTransactionsByEmployee(newValue.id);\n          } else {\n            await loadAllTransactions();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), (transactions === null || transactions === void 0 ? void 0 : transactions.length) > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sVOMyMhi+YgzBqH/pIvoDvK2G/A=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","useRef","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","ref","prev","cur","console","log","current","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","length"],"sources":["/Users/youjinli/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState, useRef } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport { Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [transactions, setTransactions] = useState<Transaction[] | []>([]);\n  const ref = useRef<{prev: string, cur: string}>({prev: '', cur: ''});\n\n  // const transactions = useMemo(\n  //   () => {\n  //     console.log(paginatedTransactions,'paginatedTransactions');\n  //     console.log(transactionsByEmployee,'transactionsByEmployee');\n      \n      \n  //     return paginatedTransactions?.data ?? transactionsByEmployee ?? null\n  //   },\n  //   [paginatedTransactions, transactionsByEmployee]\n  // )\n\n  useEffect(()=> {\n    console.log(paginatedTransactions,'paginatedTransactions-1');\n    console.log(transactionsByEmployee,'transactionsByEmployee-2');\n    if(!ref.current && paginatedTransactions?.data) {\n      setTransactions([...transactions, ...paginatedTransactions.data]);\n    }\n  }, [paginatedTransactions, transactionsByEmployee]);\n  console.log(transactions,'transactions');\n  \n  const loadAllTransactions = useCallback(async () => {\n    ref.current.cur = '';\n    ref.current.prev = '';\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      console.log(2222, employeeId);\n      ref.current = employeeId;\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if(newValue.id) {\n              await loadTransactionsByEmployee(newValue.id)\n            }else{\n              await loadAllTransactions();\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions?.length > 0 && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}